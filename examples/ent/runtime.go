// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/frisbm/enthistory/examples/ent/schema"
	"github.com/frisbm/enthistory/examples/ent/user"
	"github.com/frisbm/enthistory/examples/ent/userhistory"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[0].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	userhistoryMixin := schema.UserHistory{}.Mixin()
	userhistoryMixinFields0 := userhistoryMixin[0].Fields()
	_ = userhistoryMixinFields0
	userhistoryFields := schema.UserHistory{}.Fields()
	_ = userhistoryFields
	// userhistoryDescHistoryTime is the schema descriptor for history_time field.
	userhistoryDescHistoryTime := userhistoryFields[0].Descriptor()
	// userhistory.DefaultHistoryTime holds the default value on creation for the history_time field.
	userhistory.DefaultHistoryTime = userhistoryDescHistoryTime.Default.(func() time.Time)
	// userhistory.UpdateDefaultHistoryTime holds the default value on update for the history_time field.
	userhistory.UpdateDefaultHistoryTime = userhistoryDescHistoryTime.UpdateDefault.(func() time.Time)
	// userhistoryDescCreatedAt is the schema descriptor for created_at field.
	userhistoryDescCreatedAt := userhistoryMixinFields0[0].Descriptor()
	// userhistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	userhistory.DefaultCreatedAt = userhistoryDescCreatedAt.Default.(func() time.Time)
	// userhistoryDescUpdatedAt is the schema descriptor for updated_at field.
	userhistoryDescUpdatedAt := userhistoryMixinFields0[1].Descriptor()
	// userhistory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	userhistory.DefaultUpdatedAt = userhistoryDescUpdatedAt.Default.(func() time.Time)
	// userhistoryDescAge is the schema descriptor for age field.
	userhistoryDescAge := userhistoryFields[4].Descriptor()
	// userhistory.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	userhistory.AgeValidator = userhistoryDescAge.Validators[0].(func(int) error)
	// userhistoryDescName is the schema descriptor for name field.
	userhistoryDescName := userhistoryFields[5].Descriptor()
	// userhistory.DefaultName holds the default value on creation for the name field.
	userhistory.DefaultName = userhistoryDescName.Default.(string)
}
