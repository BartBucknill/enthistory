{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "auditing" }}
// Code generated by enthistory, DO NOT EDIT.
	{{- $pkg := base $.Config.Package }}
	{{- template "header" $ }}
import (
    {{- range $n := $.Nodes }}
        {{- $name := $n.Name }}
        {{- $history := hasSuffix $name "History" }}
        {{- if $history }}
        "{{ $.Config.Package }}/{{ lower $n.Name }}"
        {{- end }}
    {{- end }}
)

type Change struct {
    FieldName string
    Old       any
    New       any
}

func NewChange(fieldName string, old, new any) Change {
    return Change{
        FieldName: fieldName,
        Old:       old,
        New:       new,
    }
}

type HistoryDiff[T any] struct {
    Old     *T
    New     *T
    Changes []Change
}

var (
    MismatchedRefError = errors.New("cannot take diff of histories with different Refs")
    IdenticalHistoryError = errors.New("cannot take diff of identical history")
)

	{{ range $n := $.Nodes }}
	    {{ $name := $n.Name }}

	    {{ $history := hasSuffix $name "History" }}
	    {{ if $history }}
	    {{ else }}
            {{ range $h := $.Nodes }}
                {{ $sameNodeType := hasPrefix $h.Name (printf "%sHistory" $n.Name) }}
                {{ if $sameNodeType }}
func ({{ $h.Receiver }} *{{ $h.Name }}) changes(new *{{ $h.Name }}) []Change {
    var changes []Change
    {{- range $f := $n.Fields }}
    {{- if (eq $f.Type.String "time.Time") }}
    if !{{ $h.Receiver }}.{{ $f.StructField }}.Equal(new.{{ $f.StructField }}) {
    {{- else }}
    if {{ $h.Receiver }}.{{ $f.StructField }} != new.{{ $f.StructField }} {
    {{- end }}
        changes = append(changes, NewChange({{ lower $h.Name }}.Field{{ $f.StructField }} , {{ $h.Receiver }}.{{ $f.StructField }}, new.{{ $f.StructField }}))
    }
    {{- end }}
    return changes
}

func ({{ $h.Receiver }} *{{ $h.Name }}) Diff(history *{{ $h.Name }}) (*HistoryDiff[{{ $h.Name }}], error) {
    if {{ $h.Receiver }}.Ref != history.Ref {
        return nil, MismatchedRefError
    }

    {{ $h.Receiver }}Unix, historyUnix := {{ $h.Receiver }}.HistoryTime.Unix(), history.HistoryTime.Unix()
    {{ $h.Receiver }}Older := {{ $h.Receiver }}Unix < historyUnix || ({{ $h.Receiver }}Unix == historyUnix && {{ $h.Receiver }}.ID < history.ID)
    historyOlder := {{ $h.Receiver }}Unix > historyUnix || ({{ $h.Receiver }}Unix == historyUnix && {{ $h.Receiver }}.ID > history.ID)

   if {{ $h.Receiver }}Older {
        return &HistoryDiff[{{ $h.Name }}]{
            Old:     {{ $h.Receiver }},
            New:     history,
            Changes: {{ $h.Receiver }}.changes(history),
        }, nil
    } else if historyOlder {
        return &HistoryDiff[{{ $h.Name }}]{
            Old:     history,
            New:     {{ $h.Receiver }},
            Changes: history.changes({{ $h.Receiver }}),
        }, nil
    }
    return nil, IdenticalHistoryError
}
                {{ end }}
            {{ end }}
        {{ end }}
	{{ end }}
{{ end }}
