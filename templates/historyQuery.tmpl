{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "historyQuery" }}
// Code generated by enthistory, DO NOT EDIT.
	{{- $pkg := base $.Config.Package }}
	{{- template "header" $ }}
import (
    "context"

    {{- range $n := $.Nodes }}
        {{- $name := $n.Name }}
        {{- $history := hasSuffix $name "History" }}
        {{- if $history }}
        "{{ $.Config.Package }}/{{ lower $n.Name }}"
        {{- end }}
    {{- end }}
)

	{{ range $n := $.Nodes }}
	    {{ $name := $n.Name }}

	    {{ $history := hasSuffix $name "History" }}
	    {{ if $history }}
	    {{ else }}
            {{ range $h := $.Nodes }}
                {{ $sameNodeType := hasPrefix $h.Name (printf "%sHistory" $n.Name) }}
                {{ if $sameNodeType }}
                    func ({{ $h.Receiver }} *{{ $h.Name }}) Restore(ctx context.Context) (*{{ $n.Name }}, error) {
                        client := New{{ $n.Name }}Client({{ $h.Receiver }}.config)
                        return client.
                            UpdateOneID({{ $h.Receiver }}.Ref).
                        {{ range $f := $n.Fields }}
                            Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ $h.Receiver }}.{{ pascal $f.Name }}).
                        {{ end }}
                            Save(ctx)
                    }

                    func ({{ $n.Receiver }} *{{ $n.Name }}) History() *{{ $h.QueryName }}  {
                        historyClient := New{{ $h.Name }}Client({{ $n.Receiver }}.config)
                        return historyClient.Query().Where({{ lower $h.Name }}.Ref({{ $n.Receiver }}.ID))
                    }
                {{ end }}
            {{ end }}
        {{ end }}
	{{ end }}
{{ end }}
