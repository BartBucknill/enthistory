// Code generated by enthistory, DO NOT EDIT.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent"

	"github.com/frisbm/enthistory"
)

var (
	idNotFoundError = errors.New("could not get id from mutation")
)

func EntOpToHistoryOp(op ent.Op) enthistory.OpType {
	switch op {
	case ent.OpDelete, ent.OpDeleteOne:
		return enthistory.OpTypeDelete
	case ent.OpUpdate, ent.OpUpdateOne:
		return enthistory.OpTypeUpdate
	default:
		return enthistory.OpTypeInsert
	}
}

func rollback(tx *Tx, err error) error {
	if tx != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("%w: %v", err, rerr)
		}
		return err
	}
	return err
}

func (m *UserMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	userId, _ := ctx.Value("userId").(string)

	id, ok := m.ID()
	if !ok {
		return rollback(tx, idNotFoundError)
	}

	create := client.UserHistory.Create()
	if tx != nil {
		create = tx.UserHistory.Create()
	}
	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id).
		SetUpdatedBy(userId)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if age, exists := m.Age(); exists {
		create = create.SetAge(age)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	_, err = create.Save(ctx)
	if err != nil {
		rollback(tx, err)
	}
	return nil
}

func (m *UserMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	userId, _ := ctx.Value("userId").(string)

	id, ok := m.ID()
	if !ok {
		return rollback(tx, idNotFoundError)
	}

	user, err := client.User.Get(ctx, id)
	if err != nil {
		return rollback(tx, err)
	}

	create := client.UserHistory.Create()
	if tx != nil {
		create = tx.UserHistory.Create()
	}
	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id).
		SetUpdatedBy(userId)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	} else {
		create = create.SetCreatedAt(user.CreatedAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	} else {
		create = create.SetUpdatedAt(user.UpdatedAt)
	}

	if age, exists := m.Age(); exists {
		create = create.SetAge(age)
	} else {
		create = create.SetAge(user.Age)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	} else {
		create = create.SetName(user.Name)
	}

	_, err = create.Save(ctx)
	if err != nil {
		rollback(tx, err)
	}
	return nil
}

func (m *UserMutation) CreateHistoryFromDelete(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	userId, _ := ctx.Value("userId").(string)

	id, ok := m.ID()
	if !ok {
		return rollback(tx, idNotFoundError)
	}

	user, err := client.User.Get(ctx, id)
	if err != nil {
		return rollback(tx, err)
	}

	create := client.UserHistory.Create()
	if tx != nil {
		create = tx.UserHistory.Create()
	}
	_, err = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id).
		SetUpdatedBy(userId).
		SetCreatedAt(user.CreatedAt).
		SetUpdatedAt(user.UpdatedAt).
		SetAge(user.Age).
		SetName(user.Name).
		Save(ctx)
	if err != nil {
		rollback(tx, err)
	}
	return nil
}
