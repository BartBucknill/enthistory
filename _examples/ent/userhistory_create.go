// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/frisbm/enthistory"
	"github.com/frisbm/enthistory/_examples/ent/userhistory"
)

// UserHistoryCreate is the builder for creating a UserHistory entity.
type UserHistoryCreate struct {
	config
	mutation *UserHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (uhc *UserHistoryCreate) SetHistoryTime(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetHistoryTime(t)
	return uhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableHistoryTime(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetHistoryTime(*t)
	}
	return uhc
}

// SetRef sets the "ref" field.
func (uhc *UserHistoryCreate) SetRef(i int) *UserHistoryCreate {
	uhc.mutation.SetRef(i)
	return uhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableRef(i *int) *UserHistoryCreate {
	if i != nil {
		uhc.SetRef(*i)
	}
	return uhc
}

// SetUpdatedBy sets the "updated_by" field.
func (uhc *UserHistoryCreate) SetUpdatedBy(i int) *UserHistoryCreate {
	uhc.mutation.SetUpdatedBy(i)
	return uhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableUpdatedBy(i *int) *UserHistoryCreate {
	if i != nil {
		uhc.SetUpdatedBy(*i)
	}
	return uhc
}

// SetOperation sets the "operation" field.
func (uhc *UserHistoryCreate) SetOperation(et enthistory.OpType) *UserHistoryCreate {
	uhc.mutation.SetOperation(et)
	return uhc
}

// SetCreatedAt sets the "created_at" field.
func (uhc *UserHistoryCreate) SetCreatedAt(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetCreatedAt(t)
	return uhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableCreatedAt(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetCreatedAt(*t)
	}
	return uhc
}

// SetUpdatedAt sets the "updated_at" field.
func (uhc *UserHistoryCreate) SetUpdatedAt(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetUpdatedAt(t)
	return uhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableUpdatedAt(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetUpdatedAt(*t)
	}
	return uhc
}

// SetAge sets the "age" field.
func (uhc *UserHistoryCreate) SetAge(i int) *UserHistoryCreate {
	uhc.mutation.SetAge(i)
	return uhc
}

// SetName sets the "name" field.
func (uhc *UserHistoryCreate) SetName(s string) *UserHistoryCreate {
	uhc.mutation.SetName(s)
	return uhc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableName(s *string) *UserHistoryCreate {
	if s != nil {
		uhc.SetName(*s)
	}
	return uhc
}

// Mutation returns the UserHistoryMutation object of the builder.
func (uhc *UserHistoryCreate) Mutation() *UserHistoryMutation {
	return uhc.mutation
}

// Save creates the UserHistory in the database.
func (uhc *UserHistoryCreate) Save(ctx context.Context) (*UserHistory, error) {
	uhc.defaults()
	return withHooks[*UserHistory, UserHistoryMutation](ctx, uhc.sqlSave, uhc.mutation, uhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uhc *UserHistoryCreate) SaveX(ctx context.Context) *UserHistory {
	v, err := uhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhc *UserHistoryCreate) Exec(ctx context.Context) error {
	_, err := uhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhc *UserHistoryCreate) ExecX(ctx context.Context) {
	if err := uhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhc *UserHistoryCreate) defaults() {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		v := userhistory.DefaultHistoryTime()
		uhc.mutation.SetHistoryTime(v)
	}
	if _, ok := uhc.mutation.CreatedAt(); !ok {
		v := userhistory.DefaultCreatedAt()
		uhc.mutation.SetCreatedAt(v)
	}
	if _, ok := uhc.mutation.UpdatedAt(); !ok {
		v := userhistory.DefaultUpdatedAt()
		uhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uhc.mutation.Name(); !ok {
		v := userhistory.DefaultName
		uhc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhc *UserHistoryCreate) check() error {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "UserHistory.history_time"`)}
	}
	if _, ok := uhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "UserHistory.operation"`)}
	}
	if v, ok := uhc.mutation.Operation(); ok {
		if err := userhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "UserHistory.operation": %w`, err)}
		}
	}
	if _, ok := uhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserHistory.created_at"`)}
	}
	if _, ok := uhc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserHistory.updated_at"`)}
	}
	if _, ok := uhc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "UserHistory.age"`)}
	}
	if v, ok := uhc.mutation.Age(); ok {
		if err := userhistory.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "UserHistory.age": %w`, err)}
		}
	}
	if _, ok := uhc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserHistory.name"`)}
	}
	return nil
}

func (uhc *UserHistoryCreate) sqlSave(ctx context.Context) (*UserHistory, error) {
	if err := uhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uhc.mutation.id = &_node.ID
	uhc.mutation.done = true
	return _node, nil
}

func (uhc *UserHistoryCreate) createSpec() (*UserHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &UserHistory{config: uhc.config}
		_spec = sqlgraph.NewCreateSpec(userhistory.Table, sqlgraph.NewFieldSpec(userhistory.FieldID, field.TypeInt))
	)
	if value, ok := uhc.mutation.HistoryTime(); ok {
		_spec.SetField(userhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := uhc.mutation.Ref(); ok {
		_spec.SetField(userhistory.FieldRef, field.TypeInt, value)
		_node.Ref = value
	}
	if value, ok := uhc.mutation.UpdatedBy(); ok {
		_spec.SetField(userhistory.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := uhc.mutation.Operation(); ok {
		_spec.SetField(userhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := uhc.mutation.CreatedAt(); ok {
		_spec.SetField(userhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uhc.mutation.UpdatedAt(); ok {
		_spec.SetField(userhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uhc.mutation.Age(); ok {
		_spec.SetField(userhistory.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := uhc.mutation.Name(); ok {
		_spec.SetField(userhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// UserHistoryCreateBulk is the builder for creating many UserHistory entities in bulk.
type UserHistoryCreateBulk struct {
	config
	builders []*UserHistoryCreate
}

// Save creates the UserHistory entities in the database.
func (uhcb *UserHistoryCreateBulk) Save(ctx context.Context) ([]*UserHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uhcb.builders))
	nodes := make([]*UserHistory, len(uhcb.builders))
	mutators := make([]Mutator, len(uhcb.builders))
	for i := range uhcb.builders {
		func(i int, root context.Context) {
			builder := uhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uhcb *UserHistoryCreateBulk) SaveX(ctx context.Context) []*UserHistory {
	v, err := uhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhcb *UserHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := uhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhcb *UserHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := uhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
